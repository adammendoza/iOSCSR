// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Darwin;
@import Foundation;
@import Security;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("CryptoAPI")
@class SubjectDN;

SWIFT_CLASS("_TtC9CryptoAPI18CertificateManager")
@interface CertificateManager : NSObject
@property (nonatomic) OSStatus signedResult;
+ (CertificateManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Generate Certificate Signing Request
/// \param subjectDN Subject value
///
/// \param publicKeyData public key in data form
///
/// \param privateKey private key in seckey
///
///
/// returns:
/// Get String of CSR
- (NSString * _Nonnull)generateCertificateSigningRequestWithSubjectDN:(SubjectDN * _Nonnull)subjectDN publicKeyData:(NSData * _Nonnull)publicKeyData privateKey:(SecKeyRef _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Create certificate from bytes
- (void)generateCertificateFromCertificateBytesWithCertificateData:(NSData * _Nonnull)certificateData;
/// Store certificate in key chain
- (void)storeCertificateWithCertificate:(SecCertificateRef _Nonnull)certificate certAlias:(NSString * _Nonnull)certAlias;
/// Get certificate from key chain
- (SecCertificateRef _Nonnull)getCertificateWithCertAlias:(NSString * _Nonnull)certAlias SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI25CertificateSigningRequest")
@interface CertificateSigningRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <ul>
///   <li>
///     This class exists due to the easy and intuitive way of using public keys generated outside iOS in
///   </li>
///   <li>
///     the Security framework and CommonCrypto tools (yes, I’m being sarcastic here).
///   </li>
///   <li>
///     CryptoCertificateImportManager is in charge of importing a certificate and obtaining a valid key
///   </li>
///   <li>
///     reference to use in any of SecKey operations (SecKeyEncrypt, SecKeyRawVerify…).
///   </li>
///   <li>
///     As far as I know, any other way of importing and using public keys from the outside is not
///   </li>
///   <li>
///     advised: https://devforums.apple.com/message/301532#301532
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9CryptoAPI25CryptoExportImportManager")
@interface CryptoExportImportManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI17KeyPairAttributes")
@interface KeyPairAttributes : NSObject
@property (nonatomic, copy) NSString * _Nullable keyLabel;
@property (nonatomic, copy) NSString * _Nullable keyType;
@property (nonatomic, copy) NSString * _Nullable keySize;
@property (nonatomic, copy) NSString * _Nullable keyStorageType;
@property (nonatomic, copy) NSString * _Nullable keyApplicationTag;
+ (NSString * _Nonnull)RSA SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)EC SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Hardware SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)Software SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)keySize256 SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)keySize512 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14KeyPairManager")
@interface KeyPairManager : NSObject
@property (nonatomic) SecKeyRef _Nullable publicKey;
/// It generate the key pair
- (void)generateKeyPair:(KeyPairAttributes * _Nonnull)keypairAttributes completionHandler:(void (^ _Nonnull)(OSStatus))completionHandler;
/// Save Public key in key chain
- (void)savePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag publicKey:(SecKeyRef _Nullable)publicKey;
/// Get Public key from key chain
- (NSData * _Nullable)getPublicKeyWithKeyTag:(NSString * _Nonnull)keyTag SWIFT_WARN_UNUSED_RESULT;
/// Privtae key reference also store in key chain as well as in Secure Enclave so that Private key reference can also be get from keychain
- (SecKeyRef _Nullable)getPrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag prompotMessage:(NSString * _Nonnull)prompotMessage SWIFT_WARN_UNUSED_RESULT;
/// Delete key pair in key chain
- (void)deleteKeyPairWithKeyTag:(NSString * _Nonnull)keyTag;
- (void)deletePublicKeyWithKeyTag:(NSString * _Nonnull)keyTag;
- (void)deletePrivateKeyWithKeyTag:(NSString * _Nonnull)keyTag;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SignedResponse")
@interface SignedResponse : NSObject
- (NSData * _Nonnull)getSigendData SWIFT_WARN_UNUSED_RESULT;
- (OSStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (void)setSignedDataWithSData:(NSData * _Nonnull)sData;
- (void)setStatusWithS:(OSStatus)s;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI14SigningManager")
@interface SigningManager : NSObject
+ (SigningManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// It generates the hash of of data
- (NSArray<NSNumber *> * _Nonnull)getHashWithHashAlgo:(NSString * _Nonnull)hashAlgo data:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA1 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA1WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It generates the SHA256 hash of data
- (NSArray<NSNumber *> * _Nonnull)getSHA256WithBytesData:(NSData * _Nonnull)bytesData SWIFT_WARN_UNUSED_RESULT;
/// It signs data and return signature, data to be sign is always hash of actual data
- (SignedResponse * _Nonnull)signDataWithPrivateKey:(SecKeyRef _Nonnull)privateKey digest:(NSArray<NSNumber *> * _Nonnull)digest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI9SubjectDN")
@interface SubjectDN : NSObject
@property (nonatomic, copy) NSString * _Nullable commonName;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable emaiAddress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9CryptoAPI19VerificationManager")
@interface VerificationManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
